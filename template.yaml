AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  OCR Serverless Application
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Tracing: Active

Resources:
  # API Gateway
  OCRApiGateway:
      Type: AWS::Serverless::Api
      Properties:
        Name: OCRAPI
        Description: 'API to handle OCR requests'
        StageName: Prod
        Auth:
          DefaultAuthorizer: CognitoAuth
          AddDefaultAuthorizerToCorsPreflight: false
          Authorizers:
            CognitoAuth:
              UserPoolArn: 'arn:aws:cognito-idp:eu-central-1:874613073983:userpool/eu-central-1_RRA7jPh0i'
              AuthType: "COGNITO_USER_POOLS"
        Cors:
          AllowMethods: "'GET,POST,OPTIONS'"
          AllowHeaders: "'*'"
          AllowOrigin: "'*'"

  # Lambda Functions
  DocumentCreatedFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/document-created/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Tracing: Active
      Layers:
        - !Ref AwsLayer
      Policies:
        # Give the Lambda service access to poll your DynamoDB Stream
        - SQSSendMessagePolicy:
            QueueName: !GetAtt AsyncJob.QueueName
        - AmazonDynamoDBFullAccess
        - AmazonTextractFullAccess
        - AmazonS3FullAccess
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: DocumentCreatedFunction
          POWERTOOLS_METRICS_NAMESPACE: ocr-app
          LOG_LEVEL: INFO
          DOCS_TABLE: DocumentsTable
          ASYNC_QUEUE_URL: !Ref AsyncJob # Gets SQS Queue URL
      Events:
        DynamoDBEvent:
          Type: DynamoDB
          Properties: 
            Stream: !GetAtt DocumentsTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints: 
        - app.ts
        External:
          - aws-sdk
          - '@aws-lambda-powertools'
          - uuid
          - '@aws-sdk/client-textract'
          - '@aws-sdk/client-s3'

  ProcessSQSAsyncJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/process-sqs-async-job/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Tracing: Active
      Layers:
        - !Ref AwsLayer
      Policies:
        # Give the Lambda service access to poll your DynamoDB Stream
        - AmazonTextractFullAccess
        - AmazonS3FullAccess
        - AmazonSNSFullAccess
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: ProcessSQSAsyncJobFunction
          POWERTOOLS_METRICS_NAMESPACE: ocr-app
          LOG_LEVEL: INFO
          JOB_COMPLETION_NOTIFICATION_TOPIC: !Ref TextractJobCompletion
          JOB_COMPLETION_NOTIFICATION_ROLE: !GetAtt TextractServiceIamRole.Arn
      Events:
        SQSAsyncEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AsyncJob.Arn
            BatchSize: 10
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints: 
        - app.ts
        External:
          - aws-sdk
          - '@aws-lambda-powertools'
          - '@aws-sdk/client-textract'
  ProcessJobCompletionFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/process-job-completion/
        Handler: app.lambdaHandler
        Runtime: nodejs16.x
        Architectures:
          - x86_64
        Tracing: Active
        Layers:
          - !Ref AwsLayer
        Policies:
          # Give the Lambda service access to poll your DynamoDB Stream
          - AmazonTextractFullAccess
          - AmazonS3FullAccess
          - AmazonDynamoDBFullAccess
        Environment:
          Variables:
            POWERTOOLS_SERVICE_NAME: ProcessJobCompletionFunction
            POWERTOOLS_METRICS_NAMESPACE: ocr-app
            LOG_LEVEL: INFO
            DOCS_TABLE: DocumentsTable
            OUTPUTS_TABLE: OutputsTable
        Events:
          SQSJobCompleted:
            Type: SQS
            Properties:
              Queue: !GetAtt JobResults.Arn
              BatchSize: 10
      Metadata: # Manage esbuild properties
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: "es2020"
          # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
          EntryPoints: 
          - app.ts
          External:
            - aws-sdk
            - '@aws-lambda-powertools'
            - '@aws-sdk/client-s3'
            - '@aws-sdk/client-textract'
            - 'amazon-textract-response-parser'
            - 'fs'

  APIProcessorFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/process-api
        Handler: app.lambdaHandler
        Runtime: nodejs16.x
        Architectures:
          - x86_64
        Tracing: Active
        Layers:
          - !Ref AwsLayer
        Policies:
          - AmazonS3FullAccess
          - AmazonDynamoDBFullAccess
        Environment:
          Variables:
            POWERTOOLS_SERVICE_NAME: APIProcessorFunction
            POWERTOOLS_METRICS_NAMESPACE: ocr-app
            LOG_LEVEL: INFO
            DOCS_TABLE: DocumentsTable
            OUTPUTS_TABLE: OutputsTable
            DOCS_BUCKET: !Ref DocsToAnalyze
        Events:
          CreateDocumentAPI:
            Type: Api
            Properties:
              RestApiId: !Ref OCRApiGateway
              Path: /documents
              Method: POST
          GetDocumentsAPI:
            Type: Api
            Properties:
              RestApiId: !Ref OCRApiGateway
              Path: /documents
              Method: GET
          GetDocumentsByIDAPI:
            Type: Api
            Properties:
              RestApiId: !Ref OCRApiGateway
              Path: /documents/{id}
              Method: GET
          GetOutputsAPI:
            Type: Api
            Properties:
              RestApiId: !Ref OCRApiGateway
              Path: /documents/{id}/outputs
              Method: GET
      Metadata: # Manage esbuild properties
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: "es2020"
          # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
          EntryPoints: 
          - app.ts
          External:
            - aws-sdk
            - '@aws-lambda-powertools'
            - uuid
            - '@aws-sdk/client-s3'

  # Lambda Layers
  AwsLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: AwsLayer
      Description: AWS NPM package.
      ContentUri: layers/aws-layer/
      RetentionPolicy: Retain
      CompatibleRuntimes:
        - nodejs16.x
    Metadata:
      BuildMethod: nodejs16.x

  # SQS Queue
  JobResults:
    Type: AWS::SQS::Queue

  AsyncJob:
    Type: AWS::SQS::Queue

  # SNS Topic
  TextractJobCompletion:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TextractJobCompletion
      Subscription:
       - Protocol: sqs
         Endpoint: !GetAtt JobResults.Arn

  # Policy allows SNS to publish to this SQS queue
  SnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: "Allows SNS publish to SQS"
            Effect: Allow
            Principal: 
              Service: "sns.amazonaws.com"
            Resource: !GetAtt JobResults.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref TextractJobCompletion
      Queues:
        - !Ref JobResults

  # IAM Role
  TextractServiceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'textract.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        -
          PolicyName: 'AllowSNSPublish'
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref TextractJobCompletion

  # S3 Buckets
  DocsToAnalyze:
    Type: AWS::S3::Bucket

  UploadedDocuments:
    Type: AWS::S3::Bucket

  # Dynamo DB
  DocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: DocumentsTable
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      KeySchema:
        - 
          AttributeName: documentId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: documentId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  OutputsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: OutputsTable
      KeySchema:
        - 
          AttributeName: documentId
          KeyType: HASH
        -
          AttributeName: outputType
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: documentId
          AttributeType: S
        - AttributeName: outputType
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

Outputs:
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  OCRApiGateway:
    Description: 'API Gateway endpoint URL for Staging stage for OCR'
    Value: !Sub 'https://${OCRApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Staging/'
  OCRApiGatewayRestApiId:
    Description: 'API Gateway ARN for Basic AWS API Gateway'
    Value: !Ref OCRApiGateway
    Export:
      Name: OCRApiGateway-RestApiId
  OCRApiGatewayRootResourceId:
    Description: 'API Gateway Root Resource ID'
    Value: !GetAtt OCRApiGateway.RootResourceId
    Export:
      Name: OCRApiGateway-RootResourceId
  DocumentCreatedFunction:
    Description: "Process S3 Event Lambda Function ARN"
    Value: !GetAtt DocumentCreatedFunction.Arn
  APIProcessorFunction:
    Description: "Process API Events Lambda Function ARN"
    Value: !GetAtt APIProcessorFunction.Arn
  DocumentCreatedFunctionIamRole:
    Description: "Implicit IAM Role created for Process S3 Event function"
    Value: !GetAtt DocumentCreatedFunctionRole.Arn
  ProcessSQSAsyncJobFunction:
    Description: "Process SQS Async Job Lambda Function ARN"
    Value: !GetAtt ProcessSQSAsyncJobFunction.Arn
  ProcessSQSAsyncJobFunctionIamRole:
    Description: "Implicit IAM Role created for Process SQS Async Job function"
    Value: !GetAtt ProcessSQSAsyncJobFunctionRole.Arn
  ProcessJobCompletionFunction:
    Description: "Process SQS Job Completion Lambda Function ARN"
    Value: !GetAtt ProcessJobCompletionFunction.Arn
  ProcessJobCompletionFunctionIamRole:
    Description: "Implicit IAM Role created for Process SQS Job Completion function"
    Value: !GetAtt ProcessJobCompletionFunctionRole.Arn
  DocumentsTable:
    Description: "This is the table to store that progress of document analysis"
    Value: !GetAtt DocumentsTable.Arn
  OutputsTable:
    Description: "This is the table to store that analysis output of each document"
    Value: !GetAtt OutputsTable.Arn
  DocsToAnalyze:
    Description: "This is the bucket used to analyze documents"
    Value: !GetAtt DocsToAnalyze.Arn
  UploadedDocuments:
    Description: "This is the bucket used to upload documents"
    Value: !GetAtt UploadedDocuments.Arn
  AsyncJob:
    Description: "This is the async job results queue"
    Value: !GetAtt AsyncJob.Arn
  JobResults:
    Description: "This is the textract job results queue"
    Value: !GetAtt JobResults.Arn
  TextractJobCompletion:
    Description: "This is the textract job completion SNS topic name"
    Value: !Ref TextractJobCompletion
  TextractServiceIamRole:
    Description: "IAM Role created for Textract"
    Value: !GetAtt TextractServiceIamRole.Arn