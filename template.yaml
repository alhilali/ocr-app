AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  OCR Serverless Application
  
# More info about Globals: https://github.com/awslabs/serverless-application-model/blob/master/docs/globals.rst
Globals:
  Function:
    Timeout: 30
    Tracing: Active
    Layers:
      - !Ref CommonLayer

Parameters:
  UserEmail:
    Description: Email address of the created user
    Type: String

Resources:
  # API Gateway
  OCRApiGateway:
      Type: AWS::Serverless::Api
      Properties:
        Name: OCRAPI
        Description: 'API to handle OCR requests'
        StageName: Prod
        Auth:
          DefaultAuthorizer: CognitoAuth
          AddDefaultAuthorizerToCorsPreflight: false
          Authorizers:
            CognitoAuth:
              UserPoolArn: !GetAtt UserPool.Arn
              AuthType: "COGNITO_USER_POOLS"
        Cors:
          AllowMethods: "'GET,POST,OPTIONS'"
          AllowHeaders: "'*'"
          AllowOrigin: "'*'"

  # Lambda Functions
  DocumentCreatedFunction:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    Properties:
      CodeUri: functions/document-created/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Tracing: Active
      Policies:
        # Give the Lambda service access to poll your DynamoDB Stream
        - SQSSendMessagePolicy:
            QueueName: !GetAtt AsyncJob.QueueName
        - AmazonDynamoDBFullAccess
        - AmazonTextractFullAccess
        - AmazonS3FullAccess
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: DocumentCreatedFunction
          POWERTOOLS_METRICS_NAMESPACE: ocr-app
          LOG_LEVEL: INFO
          DOCS_TABLE: !Ref DocumentsTable
          ASYNC_QUEUE_URL: !Ref AsyncJob # Gets SQS Queue URL
      Events:
        DynamoDBEvent:
          Type: DynamoDB
          Properties: 
            Stream: !GetAtt DocumentsTable.StreamArn
            StartingPosition: TRIM_HORIZON
            BatchSize: 10
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints: 
        - app.ts
        External:
          - aws-sdk
          - '@aws-lambda-powertools'
          - uuid
          - '@aws-sdk/client-textract'
          - '@aws-sdk/client-s3'
          - '/opt/nodejs/common/utils/*'

  ProcessSQSAsyncJobFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: functions/process-sqs-async-job/
      Handler: app.lambdaHandler
      Runtime: nodejs16.x
      Architectures:
        - x86_64
      Tracing: Active
      Policies:
        # Give the Lambda service access to poll your DynamoDB Stream
        - AmazonTextractFullAccess
        - AmazonS3FullAccess
        - AmazonSNSFullAccess
      Environment:
        Variables:
          POWERTOOLS_SERVICE_NAME: ProcessSQSAsyncJobFunction
          POWERTOOLS_METRICS_NAMESPACE: ocr-app
          LOG_LEVEL: INFO
          JOB_COMPLETION_NOTIFICATION_TOPIC: !Ref TextractJobCompletion
          JOB_COMPLETION_NOTIFICATION_ROLE: !GetAtt TextractServiceIamRole.Arn
      Events:
        SQSAsyncEvent:
          Type: SQS
          Properties:
            Queue: !GetAtt AsyncJob.Arn
            BatchSize: 10
    Metadata: # Manage esbuild properties
      BuildMethod: esbuild
      BuildProperties:
        Minify: true
        Target: "es2020"
        # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
        EntryPoints: 
        - app.ts
        External:
          - aws-sdk
          - '@aws-lambda-powertools'
          - '@aws-sdk/client-textract'
          - '/opt/nodejs/common/utils/*'

  ProcessJobCompletionFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/process-job-completion/
        Handler: app.lambdaHandler
        Runtime: nodejs16.x
        Architectures:
          - x86_64
        Tracing: Active
        Policies:
          # Give the Lambda service access to poll your DynamoDB Stream
          - AmazonTextractFullAccess
          - AmazonS3FullAccess
          - AmazonDynamoDBFullAccess
          - ComprehendFullAccess
        Environment:
          Variables:
            POWERTOOLS_SERVICE_NAME: ProcessJobCompletionFunction
            POWERTOOLS_METRICS_NAMESPACE: ocr-app
            LOG_LEVEL: INFO
            DOCS_TABLE: !Ref DocumentsTable
            OUTPUTS_TABLE: !Ref OutputsTable
            OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
            OPENSEARCH_INDEX_NAME: ocr-index
        Events:
          SQSJobCompleted:
            Type: SQS
            Properties:
              Queue: !GetAtt JobResults.Arn
              BatchSize: 10
      Metadata: # Manage esbuild properties
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: "es2020"
          # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
          EntryPoints: 
          - app.ts
          External:
            - aws-sdk
            - '@aws-lambda-powertools'
            - '@aws-sdk/client-s3'
            - '@aws-sdk/client-textract'
            - 'amazon-textract-response-parser'
            - 'fs'
            - '@aws-sdk/client-opensearch'
            - 'aws4'
            - '@aws-sdk/credential-provider-node'
            - '@opensearch-project/opensearch'
            - 'aws-opensearch-connector'
            - '/opt/nodejs/common/utils/*'
            - '@aws-sdk/client-comprehend'

  APIProcessorFunction:
      Type: AWS::Serverless::Function
      Properties:
        CodeUri: functions/process-api
        Handler: app.lambdaHandler
        Runtime: nodejs16.x
        Architectures:
          - x86_64
        Tracing: Active
        Policies:
          - AmazonS3FullAccess
          - AmazonDynamoDBFullAccess
        Environment:
          Variables:
            POWERTOOLS_SERVICE_NAME: APIProcessorFunction
            POWERTOOLS_METRICS_NAMESPACE: ocr-app
            LOG_LEVEL: INFO
            DOCS_TABLE: !Ref DocumentsTable
            OUTPUTS_TABLE: !Ref OutputsTable
            DOCS_BUCKET: !Ref DocsToAnalyze
            OPENSEARCH_ENDPOINT: !GetAtt OpenSearchDomain.DomainEndpoint
            OPENSEARCH_INDEX_NAME: ocr-index
            IDENTITY_POOL_ID: !Ref IdentityPool
            USER_POOL_ID: !Ref UserPool
        Events:
          CreateDocumentAPI:
            Type: Api
            Properties:
              RestApiId: !Ref OCRApiGateway
              Path: /api/documents
              Method: POST
          GetDocumentsAPI:
            Type: Api
            Properties:
              RestApiId: !Ref OCRApiGateway
              Path: /api/documents
              Method: GET
          GetDocumentsByIDAPI:
            Type: Api
            Properties:
              RestApiId: !Ref OCRApiGateway
              Path: /api/documents/{id}
              Method: GET
          GetOutputsAPI:
            Type: Api
            Properties:
              RestApiId: !Ref OCRApiGateway
              Path: /api/documents/{id}/outputs
              Method: GET
          GetSearchAPI:
            Type: Api
            Properties:
              RestApiId: !Ref OCRApiGateway
              Path: /api/search
              Method: GET
      Metadata: # Manage esbuild properties
        BuildMethod: esbuild
        BuildProperties:
          Minify: true
          Target: "es2020"
          # Sourcemap: true # Enabling source maps will create the required NODE_OPTIONS environment variables on your lambda function during sam build
          EntryPoints: 
          - app.ts
          External:
            - aws-sdk
            - '@aws-lambda-powertools'
            - uuid
            - '@aws-sdk/client-s3'
            - '@aws-sdk/credential-provider-node'
            - '@opensearch-project/opensearch'
            - 'aws-opensearch-connector'
            - '/opt/nodejs/common/utils/*'

  # Lambda Layers
  CommonLayer:
    Type: AWS::Serverless::LayerVersion
    Properties:
      LayerName: CommonLayer
      Description: AWS NPM package.
      ContentUri: layers/common/
      RetentionPolicy: Retain
      CompatibleRuntimes:
        - nodejs16.x
    Metadata:
      BuildMethod: makefile

  # SQS Queue
  JobResults:
    Type: AWS::SQS::Queue

  AsyncJob:
    Type: AWS::SQS::Queue

  # SNS Topic
  TextractJobCompletion:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: TextractJobCompletion
      Subscription:
       - Protocol: sqs
         Endpoint: !GetAtt JobResults.Arn

  # Policy allows SNS to publish to this SQS queue
  SnsToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
          - Sid: "Allows SNS publish to SQS"
            Effect: Allow
            Principal: 
              Service: "sns.amazonaws.com"
            Resource: !GetAtt JobResults.Arn
            Action: SQS:SendMessage
            Condition:
              ArnEquals:
                aws:SourceArn: !Ref TextractJobCompletion
      Queues:
        - !Ref JobResults

  # IAM Role
  TextractServiceIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'textract.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      Policies:
        -
          PolicyName: 'AllowSNSPublish'
          PolicyDocument:
            Statement:
              -
                Effect: Allow
                Action:
                  - 'sns:Publish'
                Resource: !Ref TextractJobCompletion
  # Open Search
  OpenSearchDomain:
        Type: AWS::OpenSearchService::Domain
        Properties:
          DomainName: 'ocr-domain'
          EngineVersion: 'OpenSearch_1.3'
          ClusterConfig:
            DedicatedMasterEnabled: true
            InstanceCount: 2
            ZoneAwarenessEnabled: true
            InstanceType: 't3.small.search'
            DedicatedMasterType: 't3.small.search'
          EBSOptions:
            EBSEnabled: true
            VolumeSize: 20
            VolumeType: 'gp2'
          CognitoOptions:
            Enabled: True
            UserPoolId: !Ref UserPool
            IdentityPoolId: !Ref IdentityPool
            RoleArn: !GetAtt OpenSearchCognitoIamRole.Arn
          AccessPolicies:
            Version: '2012-10-17'
            Statement:
              - Effect: 'Allow'
                Principal:
                  AWS: !GetAtt ProcessJobCompletionFunctionRole.Arn
                Action: 'es:*'
                Resource:
                  - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ocr-domain/*'
              - Effect: 'Allow'
                Principal:
                  AWS: !GetAtt APIProcessorFunctionRole.Arn
                Action: 'es:*'
                Resource:
                  - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ocr-domain/*'
              - Effect: 'Allow'
                Principal:
                  AWS: !GetAtt AdminUserRole.Arn
                Action: 'es:*'
                Resource:
                  - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ocr-domain/*'
              - Effect: 'Allow'
                Principal:
                  AWS:
                    - '*'
                Action: 'es:ESHttp*'
                Resource:
                  - !Sub 'arn:aws:es:${AWS::Region}:${AWS::AccountId}:domain/ocr-domain/*'
          NodeToNodeEncryptionOptions:
            Enabled: true
          EncryptionAtRestOptions:
            Enabled: true
          DomainEndpointOptions:
            EnforceHTTPS: true
          AdvancedOptions:
            rest.action.multi.allow_explicit_index: true
          AdvancedSecurityOptions:
            Enabled: true
            InternalUserDatabaseEnabled: false
            MasterUserOptions:
              MasterUserARN: !GetAtt AdminUserRole.Arn

  # IAM Role
  OpenSearchCognitoIamRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          -
            Effect: Allow
            Principal:
              Service:
                - 'es.amazonaws.com'
            Action:
              - 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/AmazonESCognitoAccess'

  # S3 Buckets
  DocsToAnalyze:
    Type: AWS::S3::Bucket

  # Dynamo DB
  DocumentsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      StreamSpecification:
        StreamViewType: NEW_IMAGE
      KeySchema:
        - 
          AttributeName: documentId
          KeyType: HASH
      AttributeDefinitions:
        - AttributeName: documentId
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  OutputsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      KeySchema:
        - 
          AttributeName: documentId
          KeyType: HASH
        -
          AttributeName: outputType
          KeyType: RANGE
      AttributeDefinitions:
        - AttributeName: documentId
          AttributeType: S
        - AttributeName: outputType
          AttributeType: S
      BillingMode: PAY_PER_REQUEST

  # Cognito
  UserPool:
      Type: AWS::Cognito::UserPool
      Properties:
        Policies:
          PasswordPolicy:
            MinimumLength: 8
        AliasAttributes:
          - preferred_username
        Schema:
          - AttributeDataType: String
            Name: email
            Required: false
          - AttributeDataType: String
            Name: department
            Required: false
            Mutable: true

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain 
    Properties:
        UserPoolId: !Ref UserPool 
        Domain: "ocr-app"

  UserPoolUser:
    Type: AWS::Cognito::UserPoolUser
    Properties:
      DesiredDeliveryMediums:
        - EMAIL
      Username: !Ref UserEmail
      UserPoolId: !Ref UserPool
      UserAttributes:
        - Name: email
          Value: !Ref UserEmail

  UserPoolClient:
      Type: AWS::Cognito::UserPoolClient
      Properties:
        UserPoolId: !Ref UserPool
        GenerateSecret: false

  IdentityPool:
    Type: AWS::Cognito::IdentityPool
    Properties:
      AllowUnauthenticatedIdentities: false
      CognitoIdentityProviders: 
        - ClientId: !Ref UserPoolClient
          ProviderName: !GetAtt UserPool.ProviderName

  # groups
  AdminUserGroup:
    Type: AWS::Cognito::UserPoolGroup
    Properties: 
      Description: Admin Group
      RoleArn: !GetAtt AdminUserRole.Arn
      UserPoolId: !Ref UserPool

  # add users to groups
  AdminUsersToGroup:
    Type: AWS::Cognito::UserPoolUserToGroupAttachment
    Properties: 
      GroupName: !Ref AdminUserGroup
      Username: !Ref UserPoolUser
      UserPoolId: !Ref UserPool

  # roles
  # Create a role for unauthorized acces to AWS resources. Very limited access.
  UnAuthorizedRole:
    Type: "AWS::IAM::Role"
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": unauthenticated
      Policies:
        - PolicyName: "CognitoUnauthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                Resource: "*"

  # Create a role for authorized acces to AWS resources.
  AuthorizedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: "*"

  AdminUserRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument: 
        Version: "2012-10-17"
        Statement:
          - Effect: "Allow"
            Principal: 
              Federated: "cognito-identity.amazonaws.com"
            Action: 
              - "sts:AssumeRoleWithWebIdentity"
            Condition:
              StringEquals: 
                "cognito-identity.amazonaws.com:aud": !Ref IdentityPool
              "ForAnyValue:StringLike":
                "cognito-identity.amazonaws.com:amr": authenticated
      Policies:
        - PolicyName: "CognitoAuthorizedPolicy"
          PolicyDocument: 
            Version: "2012-10-17"
            Statement: 
              - Effect: "Allow"
                Action:
                  - "mobileanalytics:PutEvents"
                  - "cognito-sync:*"
                  - "cognito-identity:*"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "lambda:InvokeFunction"
                Resource: "*"
              - Effect: "Allow"
                Action:
                  - "s3:*"
                Resource: "*" 

  # Assigns the roles to the Identity Pool
  IdentityPoolRoleMapping:
    Type: "AWS::Cognito::IdentityPoolRoleAttachment"
    Properties:
      IdentityPoolId: !Ref IdentityPool
      Roles:
        authenticated: !GetAtt AuthorizedRole.Arn
        unauthenticated: !GetAtt UnAuthorizedRole.Arn

  # Frontend Website Resources
  FrontendBucket:
    Type: AWS::S3::Bucket

  CloudFrontDistribution:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Origins:
            - Id: FrontendBucket
              DomainName: !GetAtt FrontendBucket.RegionalDomainName
              S3OriginConfig:
                OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
            - Id: Backend
              DomainName: !Sub "${OCRApiGateway}.execute-api.${AWS::Region}.amazonaws.com"
              OriginPath: "/Prod"
              CustomOriginConfig:
                OriginProtocolPolicy: https-only
          DefaultCacheBehavior:
            TargetOriginId: FrontendBucket
            ViewerProtocolPolicy: redirect-to-https
            ForwardedValues:
              QueryString: true
          CacheBehaviors:
            - TargetOriginId: Backend
              PathPattern: "api/*"
              DefaultTTL: 0
              MinTTL: 0
              MaxTTL: 0
              ViewerProtocolPolicy: https-only
              AllowedMethods: [GET,HEAD,OPTIONS,PUT,PATCH,POST,DELETE]
              ForwardedValues:
                QueryString: true
                Headers:
                  - "Authorization"
          CustomErrorResponses:
            - ErrorCachingMinTTL: 10
              ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /index.html
            - ErrorCachingMinTTL: 10
              ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /index.html
          Enabled: true
          DefaultRootObject: index.html

  FrontendBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      PolicyDocument:
        Id: MyPolicy
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId
            Action: 's3:GetObject'
            Resource: !Sub
              - 'arn:aws:s3:::${Bucket}/*'
              - Bucket: !Ref FrontendBucket
      Bucket: !Ref FrontendBucket
        
  CloudFrontOriginAccessIdentity:
    Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
    Properties: 
      CloudFrontOriginAccessIdentityConfig: 
        Comment: CloudFront access identity  

Outputs:
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  OCRApiGateway:
    Description: 'API Gateway endpoint URL for Staging stage for OCR'
    Value: !Sub 'https://${OCRApiGateway}.execute-api.${AWS::Region}.amazonaws.com/Staging/'
  OCRApiGatewayRestApiId:
    Description: 'API Gateway ARN for Basic AWS API Gateway'
    Value: !Ref OCRApiGateway
    Export:
      Name: OCRApiGateway-RestApiId
  OCRApiGatewayRootResourceId:
    Description: 'API Gateway Root Resource ID'
    Value: !GetAtt OCRApiGateway.RootResourceId
    Export:
      Name: OCRApiGateway-RootResourceId
  DocumentCreatedFunction:
    Description: "Process S3 Event Lambda Function ARN"
    Value: !GetAtt DocumentCreatedFunction.Arn
  APIProcessorFunction:
    Description: "Process API Events Lambda Function ARN"
    Value: !GetAtt APIProcessorFunction.Arn
  DocumentCreatedFunctionIamRole:
    Description: "Implicit IAM Role created for Process S3 Event function"
    Value: !GetAtt DocumentCreatedFunctionRole.Arn
  ProcessSQSAsyncJobFunction:
    Description: "Process SQS Async Job Lambda Function ARN"
    Value: !GetAtt ProcessSQSAsyncJobFunction.Arn
  ProcessSQSAsyncJobFunctionIamRole:
    Description: "Implicit IAM Role created for Process SQS Async Job function"
    Value: !GetAtt ProcessSQSAsyncJobFunctionRole.Arn
  ProcessJobCompletionFunction:
    Description: "Process SQS Job Completion Lambda Function ARN"
    Value: !GetAtt ProcessJobCompletionFunction.Arn
  ProcessJobCompletionFunctionIamRole:
    Description: "Implicit IAM Role created for Process SQS Job Completion function"
    Value: !GetAtt ProcessJobCompletionFunctionRole.Arn
  DocumentsTable:
    Description: "This is the table to store that progress of document analysis"
    Value: !GetAtt DocumentsTable.Arn
  OutputsTable:
    Description: "This is the table to store that analysis output of each document"
    Value: !GetAtt OutputsTable.Arn
  DocsToAnalyze:
    Description: "This is the bucket used to analyze documents"
    Value: !GetAtt DocsToAnalyze.Arn
  FrontendBucket:
    Description: "This is the bucket used to serve frontend"
    Value: !GetAtt FrontendBucket.Arn
  AsyncJob:
    Description: "This is the async job results queue"
    Value: !GetAtt AsyncJob.Arn
  JobResults:
    Description: "This is the textract job results queue"
    Value: !GetAtt JobResults.Arn
  TextractJobCompletion:
    Description: "This is the textract job completion SNS topic name"
    Value: !Ref TextractJobCompletion
  TextractServiceIamRole:
    Description: "IAM Role created for Textract"
    Value: !GetAtt TextractServiceIamRole.Arn
  OpenSearchDomain:
    Description: "Open Search used to search within documents"
    Value: !GetAtt OpenSearchDomain.DomainEndpoint
  OpenSearchDomainName:
    Description: "Open Search Domain Name used to search within documents"
    Value: !Ref OpenSearchDomain
  OpenSearchDashboardUrl:
    Description: "OpenSearch Dashboard URL"
    Value: !Sub
            - 'https://${Domain}/_dashboards'
            - Domain: !GetAtt OpenSearchDomain.DomainEndpoint
  UserPoolId:
    Description: "ID of the Cognito User Pool"
    Value: !Ref UserPool
  UserPoolClientId:
    Description: "ID of the Cognito User Pool Client"
    Value: !Ref UserPoolClient
  IdentityPoolId:
    Description: "ID of the Cognito Identity Pool"
    Value: !Ref IdentityPool
  Website:
    Description: "URL of a Simple Frontend Website to interact with documents"
    Value: !GetAtt CloudFrontDistribution.DomainName